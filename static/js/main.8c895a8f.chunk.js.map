{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","this","props","title","children","Component","FeedbackOptions","options","onLeaveFeedback","map","option","feedback","type","data-feedback","onClick","FeedbackBtn","Notification","message","Statistics","total","good","neutral","bad","positivePercentage","App","state","handleFeedback","target","dataset","setState","prevState","Object","values","reduce","a","b","countTotalFeedback","Math","round","countPositivePercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAaeA,E,uKATX,OACE,oCACE,6BAAKC,KAAKC,MAAMC,QACfF,KAAKC,MAAME,gB,GALEC,aCiBPC,EANS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OAdP,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUH,EAAsB,EAAtBA,gBAC/B,OACE,wBAEEI,KAAK,SACLC,gBAAeF,EACfG,QAASN,EAJX,SAMGG,GALIA,GAYPI,CAAY,CAAEJ,SAAUD,EAAQF,wBCbrBQ,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCoB3BC,E,uKAfX,OAAyB,IAArBjB,KAAKC,MAAMiB,MACN,cAAC,EAAD,CAAcF,QAAQ,sBAG7B,+BACE,wCAAWhB,KAAKC,MAAMkB,QACtB,2CAAcnB,KAAKC,MAAMmB,WACzB,uCAAUpB,KAAKC,MAAMoB,OACrB,yCAAYrB,KAAKC,MAAMiB,SACvB,sDAAyBlB,KAAKC,MAAMqB,6B,GAXnBlB,aCInBE,EAAU,CAAC,OAAQ,UAAW,OAuDrBiB,E,4MApDbC,MAAQ,CACNL,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPI,eAAiB,YAAiB,IACxBf,EADuB,EAAbgB,OACUC,QAApBjB,SACR,EAAKkB,UAAS,SAAAC,GAAS,sBAAQnB,EAAWmB,EAAUnB,GAAY,O,uDAGxD,IAAD,SACwBV,KAAKwB,MAA5BL,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IASjBH,EARqB,WAAO,IAAD,EACA,EAAKM,MAA5BL,EADuB,EACvBA,KAAMC,EADiB,EACjBA,QAASC,EADQ,EACRA,IACvB,OAAOS,OAAOC,OAAO,CACnBZ,OACAC,UACAC,QACCW,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAEfC,GAORb,EAL0B,WAAO,IAC7BH,EAAS,EAAKK,MAAdL,KACR,OAAOD,EAAQkB,KAAKC,MAAOlB,EAAOD,EAAS,KAAO,EAGzBoB,GAE3B,OACE,gCACE,cAAC,EAAD,CAASpC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASA,EACTC,gBAAiBP,KAAKyB,mBAG1B,cAAC,EAAD,CAASvB,MAAM,aAAf,SACE,cAAC,EAAD,CACEiB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLH,MAAOA,EACPI,mBAAoBA,a,GA7CdlB,aCJlBmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8c895a8f.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass Section extends Component {\n  render() {\n    return (\n      <section>\n        <h2>{this.props.title}</h2>\n        {this.props.children}\n      </section>\n    );\n  }\n}\n\nexport default Section;\n","const FeedbackBtn = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button\n      key={feedback}\n      type=\"button\"\n      data-feedback={feedback}\n      onClick={onLeaveFeedback}\n    >\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option =>\n    FeedbackBtn({ feedback: option, onLeaveFeedback }),\n  );\n};\n\nexport default FeedbackOptions;\n","const Notification = ({ message }) => <p>{message}</p>;\n\nexport default Notification;\n","import { Component } from 'react';\nimport Notification from '../Notification/Notification';\n\nclass Statistics extends Component {\n  render() {\n    if (this.props.total === 0) {\n      return <Notification message=\"No feedback given\" />;\n    }\n    return (\n      <ul>\n        <li>Good: {this.props.good}</li>\n        <li>Neutral: {this.props.neutral}</li>\n        <li>Bad: {this.props.bad}</li>\n        <li>Total: {this.props.total}</li>\n        <li>Positive feedbacks: {this.props.positivePercentage}</li>\n      </ul>\n    );\n  }\n}\n\nexport default Statistics;\n","import { Component } from 'react';\n\nimport React from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\n\nconst options = ['good', 'neutral', 'bad'];\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countTotalFeedback = () => {\n      const { good, neutral, bad } = this.state;\n      return Object.values({\n        good,\n        neutral,\n        bad,\n      }).reduce((a, b) => a + b, 0);\n    };\n    const total = countTotalFeedback();\n\n    const countPositivePercentage = () => {\n      const { good } = this.state;\n      return total ? Math.round((good / total) * 100) : 0;\n    };\n\n    const positivePercentage = countPositivePercentage();\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}